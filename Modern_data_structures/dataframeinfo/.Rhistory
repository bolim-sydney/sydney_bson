# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
} else{
stop("y must be a column name in x")
}
}
# Example 4
info(x = nycflights13::flights, y = "dep_delay")
# Unique values are generated as a table
View(info)
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
} else{
stop("y must be a column name in x")
}
}
# Example 4
info(x = nycflights13::flights, y = "dep_delay")
# Unique values are generated as a table
# Error example 1
info(x = list(a = rnorm(10, mean = 5, sd=1), b = 1:10), y = "a")
# Error example 1
info(x = list(a = rnorm(10, mean = 5, sd=1), b = 1:10), y = "a")
# Error example 2
info(x = data.frame(a = rnorm(10, mean = 5, sd=1), b = 1:10), y = "c")
devtools::test()
library(testthat)
library(dataframeinfo)
test_check("dataframeinfo")
View(info)
View(info)
devtools::load_all()
devtools::test()
devtools::test()
?expect_condition
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
if(is.na(x) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
} else{
stop("y must be a column name in x")
}
}
info(a = (NA, NA), y = "a")
info(x = data.frame(a = (NA, NA)), y = "a")
info(x = data.frame(matrix(NA, nrow=2, ncol=3), y = "1")
info(x = data.frame(matrix(NA, nrow=2, ncol=3)), y = "1")
g <- data.frame(NA, nrow = 2, ncol = 3)
g
g <- data.frame(matrix(NA, nrow = 2, ncol = 3))
g
info(x = g, y = "X1")
test()
is.na(g)
all.vars(is.na(g) == TRUE)
all.equal(g, NA)
all.names(is.na(g)==TRUE)
all.names(is.na(g))
is.na.data.frame()
is.na.data.frame(g)
?is.na.data.frame
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
# check x
# dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# x is NA data frame
if(is.na.data.frame(x) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
all(is.na(g))
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
# check x
# dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# x is NA data frame
if(all(is.na(x)) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
View(info)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
info <- function(x, y){
# check x
# dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# x is NA data frame
if(all(is.na(x)) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
# check x
# dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# x is NA data frame
if(all(is.na(x)) != FALSE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
expect_error()
info(x = g, y = "X1")
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
# check x dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# check x NA dataaframe
if(all(is.na(x)) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
devtools::check()
source('~/GitHub/Son_Bolim/HW_05/dataframeinfo/R/info_function.R')
@export
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
# check x dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# check x NA dataaframe
if(all(is.na(x)) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
devtools::check()
getwd()
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
# check x dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# check x NA dataaframe
if(all(is.na(x)) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
document()
#' Inspects a column in a data frame
#'
#' Info checks a column in a
#' data frame, so that you do not end up
#' spending hours to find out
#' why your calculations just do not work
#'
#' It generates 5 things:
#' 1) number of NA
#' 2) total number, including NA
#' 3) proportion of NA in the particular variable
#' 4) list of unique values in the variable
#' 5) quartiles, mean, maximum and minimum value in a variable
#'
#' @param x is a dataframe that you want to inspect
#' @param y is the column in dataframe x that you want to inspect
#'
#' @keywords dataframe, variable, inspect
#' @examples
#' info(x = data.frame(a = 10:20, b= 1:11), y = "a")
#'
#' @export
info <- function(x, y){
# check x dataframe
if(is.data.frame(x) == FALSE)
stop("x must be a data frame")
# check x NA dataaframe
if(all(is.na(x)) == TRUE)
stop("x must have a value")
# check if y is a column name in x
a <- c(colnames(x))
if(y %in% a == TRUE){
# Print column information
x_new <- x[ ,y]
na <- sum(is.na(x_new))
ttl <- nrow(x)
naperc <- ifelse(ttl != 0, na/ttl, "not computable")
uniqv <- as.list(unique(x[,y]))
sums <- summary(x_new)
list(NA_count = na, Total_count = ttl, NA_ratio = naperc, unique_value = uniqv, summary_is = sums)
# warning message for y
} else{
stop("y must be a column name in x")
}
}
document()
loadNamespace()
loadNamespace("dataframeinfo")
export()
library(roxygen2)
document()
devtools::check()
devtools::check()
document()
