# Change to all lower cases
colnames(survey) <- str_c(colnames(survey)) %>%
map(., str_replace_all, ' ', '_')%>%
map(., str_to_lower) %>%
map(., str_remove_all, 'hcahps_')
# Subset dataset for the ease of cleaning
# Subset for percentage questions
survey_percent <- survey %>%
select(-question, -patient_survey_star_rating,  -answer_description,) %>%
filter(answer_percent != 'Not Applicable', answer_percent != 'Not Available') %>%
mutate(answer_percent = as.numeric(answer_percent))
# Extract questions
survey_percent$question <- survey_percent$measure_id %>%
map(., str_split, "_[A-Z]{1,}_P", simplify = TRUE) %>%
map(., `[`, 1) %>% unlist(.)
# Extract answers
survey_percent$values <- survey_percent$measure_id %>%
map(., str_extract, "(SN|U|A)_P") %>% unlist(.)
# Filter only the ones that ask for "percentages"
# Assign numers to values
survey_percent <- survey_percent %>%
mutate(values = ifelse(values == "A_P", 3,
ifelse(values == "U_P", 2, 1))) %>%
filter(!is.na(values)) %>%
mutate(values2 = values*(answer_percent/100)) %>%
group_by(facility_id, question) %>%
summarise(finalvalue = sum(values2)) %>%
select(facility_id, question, finalvalue)
# Subset for star rating questions
survey_star <- survey %>%
select(facility_id, measure_id, patient_survey_star_rating) %>%
filter(patient_survey_star_rating != 'Not Applicable', patient_survey_star_rating != 'Not Available') %>%
mutate(patient_survey_star_rating = as.numeric(patient_survey_star_rating))
# Add a new column that extracts only the questions
survey_star$question <- survey_star$measure_id %>%
map(., str_split, "_STAR_RATING", simplify = TRUE) %>%
map(., `[`, 1) %>% unlist(.)
# Clean dataset
survey_star <- survey_star %>%
mutate(value2 = patient_survey_star_rating*3/5) %>%
select(-patient_survey_star_rating, -measure_id) %>%
group_by(facility_id, question) %>%
summarise(finalvalue = mean(value2))
# Merge the two clean datasets
# Spread it out
library(tidyr)
survey <- rbind(survey_percent, survey_star) %>%
group_by(facility_id, question) %>%
summarise(value = mean(finalvalue, na.rm = TRUE)) %>% #Because some had both star rating and survey question
spread(key = question, value = value)
# Check the result
head(survey)
# Create a unified mean score for all facilities
survey$survey_score <- rowMeans(survey[ ,2:24])
# Check the result
head(survey)
# Create a question data.frame for question reference
# Select only the columns that matter
survey_q <- survey_raw %>%
select('HCAHPS Measure ID', 'HCAHPS Answer Description')%>%
rename(code = 'HCAHPS Measure ID', description = 'HCAHPS Answer Description') %>%
group_by(code, description) %>%
summarise() %>%
ungroup()
# Split the code into two parts, split the answer into two parts
survey_q$code2 <- survey_q$code %>%
map(., str_split, "_[A-Z]{1,}_P$|_STAR_RATING|_LINEAR_SCORE", simplify = TRUE) %>%
map(., `[`, 1) %>% unlist(.)
# Remove "always", "usually", "sometimes or never" from the responses
# Remove star rating and linear mean scores
survey_q$description2 <- survey_q$description %>%
map(., str_remove_all, '\\"always\\" |\\"usually\\" |\\"sometimes\\" or \\"never\\" | - linear mean score| - star rating') %>% unlist(.)
# Remove other questions
survey_q$removes <- survey_q$description2 %>%
map(., str_detect, '\\".*\\"') %>% unlist(.)
# Select only variables that are important and remove duplicates
survey_q <- survey_q %>%
filter(removes == FALSE) %>%
select(code2, description2) %>%
distinct(code2, .keep_all = TRUE) %>%
rename(code = code2, description = description2) %>%
arrange(code)
# Check the final output
head(survey_q)
# Example
filter(survey_q, code == 'H_COMP_2')
# Merge three datasets for the final output
merged_data <- hospital %>%
left_join(survey) %>%
left_join(infection)
# Check the merged dataset
head(merged_data)
# Remove NA
merged_data <- merged_data %>%
filter(!is.na(survey_score) | !is.na(infection_score))
# Check the merged data
head(merged_data)
# Export the merged data
write_rds(merged_data, 'merged_data_clean.rds')
# Load library
library(ggplot2)
merged_data %>%
select(facility_id, survey_score, infection_score) %>%
ggplot(data = ., aes(x = survey_score, y = infection_score)) +
geom_point() +
geom_jitter() +
geom_smooth() +
labs(title = "Scatterplot of infection scores and survey scores", subtitle = "Year 2018", xlab = "Average survey score by institutions", ylab = "Average infection score by institutions")
# Performance by state
state_score <- merged_data %>%
select(state, infection_score, survey_score) %>%
filter(!is.na(infection_score), !is.na(survey_score)) %>%
group_by(state) %>%
summarise(state_score = mean(infection_score) + mean(survey_score)) %>%
select(state, state_score) %>%
mutate(state_score = state_score/2) %>%
arrange(desc(state_score))
# Get top 5 states
head(state_score, 5)
# Visualize the state scores
ggplot(data = state_score) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_col(aes(x = state, y = state_score)) +
coord_cartesian(ylim=c(1.7, 2.5)) +
labs(title = "Performance scores by states")
# Top 10 cities
merged_data %>%
select(city, infection_score, survey_score) %>%
filter(!is.na(infection_score), !is.na(survey_score)) %>%
group_by(city) %>%
summarise(city_score = mean(infection_score) + mean(survey_score)) %>%
select(city, city_score) %>%
mutate(city_score = city_score/2) %>%
arrange(desc(city_score)) %>%
head(., 10)
# NYC hospital performances
nyc_hospitals <- merged_data %>%
filter(city == 'NEW YORK') %>%
select(-facility_id, -city, -state, -hospital_type, -H:-H_SIDE_EFFECTS) %>%
mutate(total_score = (survey_score + infection_score)) %>%
mutate(total_score = round(total_score, digits = 2),
survey_score = round(survey_score, digits = 2),
infection_score = round(infection_score, digits = 2)) %>%
arrange(desc(total_score))
# Print results
nyc_hospitals
check()
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(hospitalrating)
# Use httr package to download from the API
# Load library
library(httr)
# Use httr package to retrieve contents
survey_sample <-content(GET('https://data.medicare.gov/resource/dgck-syfz.csv'))
infection_sample <- content(GET('https://data.medicare.gov/resource/77hc-ibv8.csv'))
hospital_sample <- content(GET('https://data.medicare.gov/resource/xubh-q36u.csv'))
# Check some information of the data retrieved
# Make a function
checkdf <- function(x){
# Stop if x is not a dataframe
if(is.data.frame(x) == FALSE) stop("x must be a data frame")
# Create list for storage
info <- list()
dim <- dim(x) # dimensions of the dataframe
colz <- colnames(x) # column names in the dataframe
# Store information in the list
info <- list(dimensions = dim, column_names = colz)
# Print out the results
return(info)
}
checkdf(infection_sample)
checkdf(survey_sample)
checkdf(hospital_sample)
# Load libraries
library(RSelenium)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(readr)
# Check the dimensions
dim(infection_raw)
dim(survey_raw)
dim(hospital_raw)
# Create a function that returns number of all unique values in a dataframe
# Use the function for exploratory data analysis
uniquevalue <- function(x){
if(is.data.frame(x) == FALSE) stop('x must be a data frame')
colz <- colnames(x)
j <- dim(x)[2]
out <- tibble::tibble(columns = colz, values = c(1:j))
i <- 1
for (i in i:j)
if(i < 1+j){
k <- unique(x[, colz[i]])
if(tibble::is_tibble(k) == TRUE){
out[i, 2] <- nrow(k) # number of unique values in i-th column
}
else{
out[i, 2] <- length(k)
}
}
return(out)
}
# Run the function
uniquevalue(infection_raw)
uniquevalue(survey_raw)
uniquevalue(hospital_raw)
# See some values
head(infection_raw)
head(survey_raw)
head(hospital_raw)
# Load libraries
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(readr)
# Select only columns I need
# Keep state, city, facility name, and hospital type for referencing information
hospital <- hospital_raw %>%
select('Facility ID':'State', -Address, 'Hospital Type')
# Tidy the column names
# Replace spaces to underscores
# Change to all lower cases
colnames(hospital) <- str_c(colnames(hospital)) %>%
map(., str_replace_all, ' ', '_')%>%
map(., str_to_lower)
# Check clean hospital dataset
head(hospital)
# Select only columns I need
# Remove address, zip code, phone number, footnote and dates
# Just leave hospital reference code (Facility ID)
infection <- infection_raw %>%
select(-Address, -'ZIP Code', -'Phone Number', -Score, -Footnote, -'Measure Start Date', -'Measure End Date', -'Facility Name')
# Tidy the column names
# Replace spaces to underscores
# Change to all lower cases
colnames(infection) <- str_c(colnames(infection)) %>%
map(., str_replace_all, ' ', '_')%>%
map(., str_to_lower)
# Create a clean dataset
# A unified dataset that has comparison with national benchmark
# Each facility receives an average score of all the comparisons it has
infection <- infection %>%
rename(comparison = compared_to_national) %>%
filter(comparison != 'Not Available') %>%
mutate(comparison = ifelse(comparison == 'Worse than the National Benchmark', 1,
ifelse(comparison == 'No Different than National Benchmark', 2, 3)))%>%
group_by(facility_id) %>%
summarise(infection_score = mean(comparison))
# Check result
head(infection)
# Select only columns I need
# Just leave hospital reference code (Facility ID), survey question, question description and scores
survey <- survey_raw %>%
select('Facility ID', 'HCAHPS Measure ID':'HCAHPS Answer Percent') %>%
select(-ends_with('Footnote'))
# Tidy the column names
# Replace spaces to underscores
# Change to all lower cases
colnames(survey) <- str_c(colnames(survey)) %>%
map(., str_replace_all, ' ', '_')%>%
map(., str_to_lower) %>%
map(., str_remove_all, 'hcahps_')
# Subset dataset for the ease of cleaning
# Subset for percentage questions
survey_percent <- survey %>%
select(-question, -patient_survey_star_rating,  -answer_description,) %>%
filter(answer_percent != 'Not Applicable', answer_percent != 'Not Available') %>%
mutate(answer_percent = as.numeric(answer_percent))
# Extract questions
survey_percent$question <- survey_percent$measure_id %>%
map(., str_split, "_[A-Z]{1,}_P", simplify = TRUE) %>%
map(., `[`, 1) %>% unlist(.)
# Extract answers
survey_percent$values <- survey_percent$measure_id %>%
map(., str_extract, "(SN|U|A)_P") %>% unlist(.)
# Filter only the ones that ask for "percentages"
# Assign numers to values
survey_percent <- survey_percent %>%
mutate(values = ifelse(values == "A_P", 3,
ifelse(values == "U_P", 2, 1))) %>%
filter(!is.na(values)) %>%
mutate(values2 = values*(answer_percent/100)) %>%
group_by(facility_id, question) %>%
summarise(finalvalue = sum(values2)) %>%
select(facility_id, question, finalvalue)
# Subset for star rating questions
survey_star <- survey %>%
select(facility_id, measure_id, patient_survey_star_rating) %>%
filter(patient_survey_star_rating != 'Not Applicable', patient_survey_star_rating != 'Not Available') %>%
mutate(patient_survey_star_rating = as.numeric(patient_survey_star_rating))
# Add a new column that extracts only the questions
survey_star$question <- survey_star$measure_id %>%
map(., str_split, "_STAR_RATING", simplify = TRUE) %>%
map(., `[`, 1) %>% unlist(.)
# Clean dataset
survey_star <- survey_star %>%
mutate(value2 = patient_survey_star_rating*3/5) %>%
select(-patient_survey_star_rating, -measure_id) %>%
group_by(facility_id, question) %>%
summarise(finalvalue = mean(value2))
# Merge the two clean datasets
# Spread it out
library(tidyr)
survey <- rbind(survey_percent, survey_star) %>%
group_by(facility_id, question) %>%
summarise(value = mean(finalvalue, na.rm = TRUE)) %>% #Because some had both star rating and survey question
spread(key = question, value = value)
# Check the result
head(survey)
# Create a unified mean score for all facilities
survey$survey_score <- rowMeans(survey[ ,2:24])
# Check the result
head(survey)
# Create a question data.frame for question reference
# Select only the columns that matter
survey_q <- survey_raw %>%
select('HCAHPS Measure ID', 'HCAHPS Answer Description')%>%
rename(code = 'HCAHPS Measure ID', description = 'HCAHPS Answer Description') %>%
group_by(code, description) %>%
summarise() %>%
ungroup()
# Split the code into two parts, split the answer into two parts
survey_q$code2 <- survey_q$code %>%
map(., str_split, "_[A-Z]{1,}_P$|_STAR_RATING|_LINEAR_SCORE", simplify = TRUE) %>%
map(., `[`, 1) %>% unlist(.)
# Remove "always", "usually", "sometimes or never" from the responses
# Remove star rating and linear mean scores
survey_q$description2 <- survey_q$description %>%
map(., str_remove_all, '\\"always\\" |\\"usually\\" |\\"sometimes\\" or \\"never\\" | - linear mean score| - star rating') %>% unlist(.)
# Remove other questions
survey_q$removes <- survey_q$description2 %>%
map(., str_detect, '\\".*\\"') %>% unlist(.)
# Select only variables that are important and remove duplicates
survey_q <- survey_q %>%
filter(removes == FALSE) %>%
select(code2, description2) %>%
distinct(code2, .keep_all = TRUE) %>%
rename(code = code2, description = description2) %>%
arrange(code)
# Check the final output
head(survey_q)
# Example
filter(survey_q, code == 'H_COMP_2')
# Merge three datasets for the final output
merged_data <- hospital %>%
left_join(survey) %>%
left_join(infection)
# Check the merged dataset
head(merged_data)
# Remove NA
merged_data <- merged_data %>%
filter(!is.na(survey_score) | !is.na(infection_score))
# Check the merged data
head(merged_data)
# Load library
library(ggplot2)
merged_data %>%
select(facility_id, survey_score, infection_score) %>%
ggplot(data = ., aes(x = survey_score, y = infection_score)) +
geom_point() +
geom_jitter() +
geom_smooth() +
labs(title = "Scatterplot of infection scores and survey scores", subtitle = "Year 2018", xlab = "Average survey score by institutions", ylab = "Average infection score by institutions")
# Performance by state
state_score <- merged_data %>%
select(state, infection_score, survey_score) %>%
filter(!is.na(infection_score), !is.na(survey_score)) %>%
group_by(state) %>%
summarise(state_score = mean(infection_score) + mean(survey_score)) %>%
select(state, state_score) %>%
mutate(state_score = state_score/2) %>%
arrange(desc(state_score))
# Get top 5 states
head(state_score, 5)
# Visualize the state scores
ggplot(data = state_score) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_col(aes(x = state, y = state_score)) +
coord_cartesian(ylim=c(1.7, 2.5)) +
labs(title = "Performance scores by states")
# Top 10 cities
merged_data %>%
select(city, infection_score, survey_score) %>%
filter(!is.na(infection_score), !is.na(survey_score)) %>%
group_by(city) %>%
summarise(city_score = mean(infection_score) + mean(survey_score)) %>%
select(city, city_score) %>%
mutate(city_score = city_score/2) %>%
arrange(desc(city_score)) %>%
head(., 10)
# NYC hospital performances
nyc_hospitals <- merged_data %>%
filter(city == 'NEW YORK') %>%
select(-facility_id, -city, -state, -hospital_type, -H:-H_SIDE_EFFECTS) %>%
mutate(total_score = (survey_score + infection_score)) %>%
mutate(total_score = round(total_score, digits = 2),
survey_score = round(survey_score, digits = 2),
infection_score = round(infection_score, digits = 2)) %>%
arrange(desc(total_score))
# Print results
nyc_hospitals
check()
use_package('qpdf', 'suggests')
checkdf(df)
#' Checks dataframe dimensions and column names.
#'
#' @param x A dataframe.
#' @return The dimensions of \code{x} and column names of \code{x}
#'
#' @examples
#' df <- data.frame(a = rnorm(10), b = c(1:10))
#' checkdf(df)
#'
checkdf <- function(x){
# Stop if x is not a dataframe
if(is.data.frame(x) == FALSE) stop("x must be a data frame")
# Create list for storage
info <- list()
dim <- dim(x) # dimensions of the dataframe
colz <- colnames(x) # column names in the dataframe
# Store information in the list
info <- list(dimensions = dim, column_names = colz)
# Print out the results
return(info)
}
checkdf(mtcars)
check()
load_all()
document()
check()
#' Checks dataframe dimensions and column names.
#'
#' @param x A dataframe.
#' @return The dimensions of \code{x} and column names of \code{x}
#'
#' @examples
#' checkdf(mtcars)
#'
checkdf <- function(x){
# Stop if x is not a dataframe
if(is.data.frame(x) == FALSE) stop("x must be a data frame")
# Create list for storage
info <- list()
dim <- dim(x) # dimensions of the dataframe
colz <- colnames(x) # column names in the dataframe
# Store information in the list
info <- list(dimensions = dim, column_names = colz)
# Print out the results
return(info)
}
hospitalrating::checkdf(mtcars)
#' Returns the number of unique values in a dataframe column
#' Generates a dataframe with column names and the number of unique values in each column.
#'
#' @param x A dataframe.
#' @return A dataframe with two columns. First column has the variables in input dataframe. Second column has the number of unique values in each variable of the input dataframe.
#'
#'
#' @examples
#' df <- data.frame(a = rnorm(10), b = c(1:5, 1:5))
#' uniquevalue(df)
#'
#' @export
uniquevalue <- function(x){
if(is.data.frame(x) == FALSE) stop('x must be a data frame')
colz <- colnames(x)
j <- dim(x)[2]
out <- tibble::tibble(columns = colz, values = c(1:j))
i <- 1
for (i in i:j)
if(i < 1+j){
k <- unique(x[, colz[i]])
if(tibble::is_tibble(k) == TRUE){
out[i, 2] <- nrow(k) # number of unique values in i-th column
}
else{
out[i, 2] <- length(k)
}
}
return(out)
}
#' Checks dataframe dimensions and column names.
#'
#' @param x A dataframe.
#' @return The dimensions of \code{x} and column names of \code{x}
#'
#' @examples
#' checkdf(mtcars)
#'
#' @export
checkdf <- function(x){
# Stop if x is not a dataframe
if(is.data.frame(x) == FALSE) stop("x must be a data frame")
# Create list for storage
info <- list()
dim <- dim(x) # dimensions of the dataframe
colz <- colnames(x) # column names in the dataframe
# Store information in the list
info <- list(dimensions = dim, column_names = colz)
# Print out the results
return(info)
}
check()
document()
check()
